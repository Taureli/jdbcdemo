package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Order;

public class OrderManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableOrder = "CREATE TABLE Order(id bigint GENERATED BY DEFAULT AS IDENTITY, customer varchar(30), idPick bigint, amount int)";

	private PreparedStatement addOrderStmt;
	private PreparedStatement deleteAllOrdersStmt;
	private PreparedStatement getAllOrdersStmt;

	private Statement statement;

	public OrderManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Order".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableOrder);

			addOrderStmt = connection
					.prepareStatement("INSERT INTO Order (customer, idPick, amount) VALUES (?, ?, ?)");
			deleteAllOrdersStmt = connection
					.prepareStatement("DELETE FROM Order");
			getAllOrdersStmt = connection
					.prepareStatement("SELECT id, customer, idPick, amount FROM Order");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearOrders() {
		try {
			deleteAllOrdersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addOrders(Order order) {
		int count = 0;
		try {
			addOrderStmt.setString(1, order.getCustomer());
			addOrderStmt.setLong(2, order.getIdPick());
			addOrderStmt.setInt(3, order.getAmount());

			count = addOrderStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Order> getAllOrders() {
		List<Order> orders = new ArrayList<Order>();

		try {
			ResultSet rs = getAllOrdersStmt.executeQuery();

			while (rs.next()) {
				Order o = new Order();
				o.setId(rs.getLong("id"));
				o.setCustomer(rs.getString("customer"));
				o.setIdPick(rs.getLong("idPick"));
				o.setAmount(rs.getInt("amount"));
				orders.add(o);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return orders;
	}

}
