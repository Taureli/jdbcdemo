package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Pick;

public class PickManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTablePick = "CREATE TABLE Pick(id bigint GENERATED BY DEFAULT AS IDENTITY, company varchar(30), name varchar(50), milimeters double, price double)";

	private PreparedStatement addPickStmt;
	private PreparedStatement deleteAllPicksStmt;
	private PreparedStatement getAllPicksStmt;
	private PreparedStatement deleteIDStmt;
	private PreparedStatement updatePriceStmt;
	private PreparedStatement selectIDStmt;

	private Statement statement;

	public PickManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Pick".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTablePick);

			addPickStmt = connection
					.prepareStatement("INSERT INTO Pick (company, name, milimeters, price) VALUES (?, ?, ?, ?)");
			deleteAllPicksStmt = connection
					.prepareStatement("DELETE FROM Pick");
			getAllPicksStmt = connection
					.prepareStatement("SELECT id, company, name, milimeters, price FROM Pick");
			deleteIDStmt = connection.prepareStatement("DELETE FROM Pick WHERE id=?");
			updatePriceStmt = connection.prepareStatement("UPDATE Pick SET Company=? WHERE id=?");
			selectIDStmt = connection.prepareStatement("SELECT id, company, name, milimeters, price FROM Pick WHERE id=?");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearPicks() {
		try {
			deleteAllPicksStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addPicks(Pick pick) {
		int count = 0;
		try {
			addPickStmt.setString(1, pick.getCompany());
			addPickStmt.setString(2, pick.getName());
			addPickStmt.setDouble(3, pick.getMilimeters());
			addPickStmt.setDouble(4, pick.getPrice());

			count = addPickStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Pick> getAllPicks() {
		List<Pick> picks = new ArrayList<Pick>();

		try {
			ResultSet rs = getAllPicksStmt.executeQuery();

			while (rs.next()) {
				Pick p = new Pick();
				p.setId(rs.getInt("id"));
				p.setCompany(rs.getString("company"));
				p.setName(rs.getString("name"));
				p.setMilimeters(rs.getDouble("milimeters"));
				p.setPrice(rs.getDouble("price"));
				picks.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return picks;
	}
	
	public int DeleteID(long id){
		
		int count = 0;
		
		try
		{
			deleteIDStmt.setLong(1, id);
			count = deleteIDStmt.executeUpdate();
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
		
		return count;
	}
	
	public int UpdateCompany(String company, long id){
		
		int count = 0;
		
		try
		{
			updatePriceStmt.setString(1, company);
			updatePriceStmt.setLong(2, id);
			
			count = updatePriceStmt.executeUpdate();
			
		} catch(SQLException e)
		{
			e.printStackTrace();
		}
		
		return count;
		
	}
	
	public Pick SelectID(long id){
		
		Pick test = null;
		
		try
		{
			test = new Pick();
			selectIDStmt.setLong(1, id);
			
			ResultSet rs = selectIDStmt.executeQuery();
			
			test.setId(rs.getInt("id"));
			test.setCompany(rs.getString("company"));
			test.setName(rs.getString("name"));
			test.setMilimeters(rs.getDouble("milimeters"));
			test.setPrice(rs.getDouble("price"));
			
			
		} catch(SQLException e)
		{
			e.printStackTrace();
		}
		
		return test;

	}

}
